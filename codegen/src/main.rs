extern crate phf_codegen;
extern crate itertools;

use itertools::Itertools;

use std::fs;
use std::io::{Read, Write};
use std::str;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let map_name = "COLORS";
    let struct_name = "Color";

    let mut spec = String::new();
    fs::File::open("spec/colors.txt")?.read_to_string(&mut spec)?;

    let mut map = phf_codegen::Map::new();
    for (line1, line2) in spec.split('\n').filter(|s| !s.is_empty()).tuples() {
        let rgb: Vec<&str> = line2.split(',').collect();
        map.entry(line1, &format!("{} {{ red: {}, green: {}, blue: {} }}",
                                  struct_name, rgb[0], rgb[1], rgb[2]));
    }

    let mut map_data = Vec::new();
    map.build(&mut map_data)?;
    let map_data = str::from_utf8(&map_data)?;


    let f = &mut fs::File::create("../src/color/colors.rs")?;

    writeln!(f, "// This file is autogenerated. Do not edit it!\n")?;

    writeln!(f, "use {};\n", struct_name)?;

    writeln!(f, "static {}: ::phf::Map<&'static str, {}> = {};\n", map_name, struct_name, map_data)?;

    writeln!(f, "pub fn from_str(text: &str) -> Option<{}> {{", struct_name)?;
    writeln!(f, "    {}.get(text).cloned()", map_name)?;
    writeln!(f, "}}")?;

    Ok(())
}
